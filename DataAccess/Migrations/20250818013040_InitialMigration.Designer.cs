// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataSeekerDbContext))]
    [Migration("20250818013040_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.LocalFolder", b =>
                {
                    b.Property<int>("LocalFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocalFolderId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("integer");

                    b.HasKey("LocalFolderId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("LocalFolders");
                });

            modelBuilder.Entity("Entities.Models.LogFile", b =>
                {
                    b.Property<int>("LogFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogFileId"));

                    b.Property<string>("LogFileName")
                        .HasColumnType("text");

                    b.Property<string>("TransferDirection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogFileId");

                    b.ToTable("LogFiles");
                });

            modelBuilder.Entity("Entities.Models.LogLine", b =>
                {
                    b.Property<int>("LogLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogLineId"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogFileId")
                        .HasColumnType("integer");

                    b.Property<int?>("UploadedFileId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("LogLineId");

                    b.HasIndex("LogFileId");

                    b.HasIndex("UploadedFileId");

                    b.ToTable("LogLines");
                });

            modelBuilder.Entity("Entities.Models.UploadedFile", b =>
                {
                    b.Property<int>("UploadedFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UploadedFileId"));

                    b.Property<int>("ContainingFolderLocalFolderId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.HasKey("UploadedFileId");

                    b.HasIndex("ContainingFolderLocalFolderId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Entities.Models.LocalFolder", b =>
                {
                    b.HasOne("Entities.Models.LocalFolder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Entities.Models.LogLine", b =>
                {
                    b.HasOne("Entities.Models.LogFile", "LogFile")
                        .WithMany("LogLines")
                        .HasForeignKey("LogFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UploadedFile", "UploadedFile")
                        .WithMany("LogLines")
                        .HasForeignKey("UploadedFileId");

                    b.Navigation("LogFile");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("Entities.Models.UploadedFile", b =>
                {
                    b.HasOne("Entities.Models.LocalFolder", "ContainingFolder")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("ContainingFolderLocalFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainingFolder");
                });

            modelBuilder.Entity("Entities.Models.LocalFolder", b =>
                {
                    b.Navigation("SubFolders");

                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("Entities.Models.LogFile", b =>
                {
                    b.Navigation("LogLines");
                });

            modelBuilder.Entity("Entities.Models.UploadedFile", b =>
                {
                    b.Navigation("LogLines");
                });
#pragma warning restore 612, 618
        }
    }
}
